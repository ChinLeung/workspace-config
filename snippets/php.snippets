snippet _w: "WordPress Translation"
<?php _e('$1', '${2:Swoo}'); ?>
endsnippet

snippet if "If case"
if ($1) {
	$2
}
endsnippet

snippet foreach "Foreach loop"
foreach ($$1 as $${2:index} => $${3:instance}) {
	$4
}
endsnippet

snippet for "For loop"
for ($${1:i} = ${2:0}; ${3:$$1 < 3}; ${4:$$1++}) {
	$5
}
endsnippet

snippet foreachi: "HTML Foreach loop"
<?php foreach ($$1 as $${2:index} => $${3:instance}): ?>
	$4
<?php endforeach; ?>
endsnippet

snippet foreach: "HTML Foreach loop"
<?php foreach ($$1 as $${2:instance}): ?>
	$3
<?php endforeach; ?>
endsnippet

snippet if: "HTML If case"
<?php if ($1): ?>
endsnippet

snippet endif "HTML End if case"
<?php endif; ?>
endsnippet

snippet echo "Echo"
<?php echo $1; ?>
endsnippet

snippet test "Test case"
/**
 * $2
 *
 * @test
 * @return void
 */
public function $1() : void
{
	$3
}
endsnippet

snippet factoryc "Laravel Factory Create"
factory($1::class)->create($2)$3
endsnippet

snippet factorym "Laravel Factory Make"
factory($1::class)->make($2)$3
endsnippet

snippet scope "Scope"
/**
 * $3
 *
 * @param  \Illuminate\Database\Eloquent\Builder  $query
 * @return \Illuminate\Database\Eloquent\Builder
 */
public function scope$1(Builder $query$2) : Builder
{
	return $query->where($4);
}
endsnippet

snippet callback "Callback Function"
function ($1) {
	$2
}
endsnippet

snippet function "Function"
/**
 * ${4: undocumented function.}
 *
 * @return ${5:void}
 */
${1:public} function $2(${3:$param}) : $5
{
	$6
}
endsnippet

snippet pufunction "Public Function"
/**
 * ${3: undocumented function.}
 *
 * @return ${4:void}
 */
public function $1(${2:$param}) : $4
{
	$5
}
endsnippet

snippet pusfunction "Public Static Function"
/**
 * ${3: undocumented function.}
 *
 * @return ${4:void}
 */
public static function $1(${2:$param}) : $4
{
	$5
}
endsnippet

snippet profunction "Protected Function"
/**
 * ${3: undocumented function.}
 *
 * @return ${4:void}
 */
protected function $1(${2:$param}) : $4
{
	$5
}
endsnippet

snippet prifunction "Private Function"
/**
 * ${3: undocumented function.}
 *
 * @return ${4:void}
 */
private function $1(${2:$param}) : $4
{
	$5
}
endsnippet

snippet property "Property"
/**
 * ${3: undocumented property.}
 *
 * @var ${4:string}
 */
${1:protected} $${2:property};
endsnippet

snippet fillable "Laravel Fillable Attribute"
/**
 * The list of attributes that are mass assignable.
 *
 * @var array
 */
protected $fillable = [
	'$1',
];
endsnippet

snippet casts "Laravel Casts Attribute"
/**
 * The attributes that should be casted to another type.
 *
 * @var array
 */
protected $casts = [
	'$1' => '$2',
];
endsnippet

snippet translatable "Spatie Translatable Attribute"
/**
 * The list of attributes that are translatable.
 *
 * @var array
 */
public $translatable = [
	'$1',
];
endsnippet

snippet foreign "Laravel Migration Foreign Key"
$table->foreign('${1:user}_id')
	->references('${2:id}')
	->on('${3:$1s}')
	->onUpdate('${4:cascade}')
	->onDelete('${5:cascade}');
endsnippet

snippet belongsTo "Laravel BelongsTo Relation"
/**
 * Relationship with the ${1:table_name}s table.
 *
 * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
 */
public function ${2:$1}() : BelongsTo
{
	return $this->belongsTo($3::class);
}
endsnippet

snippet hasMany "Laravel HasMany Relation"
/**
 * Relationship with the ${1:table_name} table.
 *
 * @return \Illuminate\Database\Eloquent\Relations\HasMany
 */
public function $1() : HasMany
{
	return $this->hasMany($2::class);
}
endsnippet

snippet hasManyThrough "Laravel HasManyThrough Relation"
/**
 * Relationship with the ${1:table_name} table.
 *
 * @return \Illuminate\Database\Eloquent\Relations\HasManyThrough
 public function $1() : HasManyThrough
 */
{
	return $this->hasManyThrough($2::class, $3::class);
}
endsnippet

snippet morphMany "Laravel MorphMany Relation"
/**
 * Relationship with the ${1:table_name} table.
 *
 * @return \Illuminate\Database\Eloquent\Relations\MorphMany
 */
public function $1() : MorphMany
{
	return $this->morphMany(${2:$class}, ${3:$slug});
}
endsnippet

snippet morphTo "Laravel MorphTo Relation"
/**
 * Retrieve the $1 object instance.
 *
 * @return \Illuminate\Database\Eloquent\Relations\MorphTo
 */
public function $1() : MorphTo
{
	return $this->morphTo();
}
endsnippet

snippet belongsToMany "Laravel BelongsToMany Relation"
/**
 * Relationship with the ${3:table_name} table.
 *
 * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
 */
public function $1() : BelongsToMany
{
	return $this->belongsToMany($2::class);
}
endsnippet

snippet construct "Class Constructor"
/**
 * Constructor of the class.
 *
 * @return void
 */
public function __construct($1)
{
	$2
}
endsnippet

snippet attribute "Laravel Class Mutator"
/**
 * ${3:Retrieve the attribute.}
 *
 * @return $2
 */
public function get$1Attribute() : $2
{
	$5
}
endsnippet
